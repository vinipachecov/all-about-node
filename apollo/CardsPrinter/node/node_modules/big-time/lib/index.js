'use strict';
var _bind = Function.prototype.bind;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var TIMEOUT_MAX = 2147483647; // 2^31-1

var Timeout = (function () {
  function Timeout(callback, delay) {
    _classCallCheck(this, Timeout);

    this._callback = callback;
    this._delay = delay;

    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    this.start(args);
  }

  _createClass(Timeout, [{
    key: 'start',
    value: function start(args) {
      var _this = this;

      var _args = args.slice(0);
      var max = module.exports._TIMEOUT_MAX;

      if (this._delay <= max) {
        _args = [this._callback, this._delay].concat(_toConsumableArray(_args));
      } else {
        var callback = function callback() {
          _this._delay -= max;
          _this.start(args);
        };
        _args = [callback, max].concat(_toConsumableArray(_args));
      }
      this._timeout = setTimeout.apply(undefined, _toConsumableArray(_args));
    }
  }, {
    key: 'close',
    value: function close() {
      clearTimeout(this._timeout);
    }
  }]);

  return Timeout;
})();

var _setTimeout = function _setTimeout() {
  for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    args[_key2] = arguments[_key2];
  }

  return new (_bind.apply(Timeout, [null].concat(args)))();
};

var _clearTimeout = function _clearTimeout(timer) {
  return timer.close();
};

module.exports = {
  setTimeout: _setTimeout,
  clearTimeout: _clearTimeout,
  _TIMEOUT_MAX: TIMEOUT_MAX
};